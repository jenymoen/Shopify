{% schema %}
{
  "name": "Product",
  "settings": [
    {
      "type": "product",
      "id": "selected_product",
      "label": "Choose product",
      "info": "If no product is selected, the current product will be displayed"
    },
    {
      "type": "checkbox",
      "id": "show_quantity_selector",
      "label": "Show quantity selector",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_variant_labels",
      "label": "Show variant labels",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_shipping_estimate",
      "label": "Show shipping estimate",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_inventory_notice",
      "label": "Show inventory notice",
      "default": true
    },
    {
      "type": "text",
      "id": "trust_badge_text",
      "label": "Trust badge text",
      "default": "ðŸ”’ Secure checkout â€¢ Money-back guarantee"
    }
  ],
  "blocks": [
    {
      "type": "social_proof",
      "name": "Social Proof",
      "settings": [
        {
          "type": "text",
          "id": "review_count",
          "label": "Review count",
          "default": "1000+"
        },
        {
          "type": "text",
          "id": "average_rating",
          "label": "Average rating",
          "default": "4.8"
        }
      ]
    },
    {
      "type": "quantity_selector",
      "name": "Quantity Selector",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "label",
          "label": "Quantity label",
          "default": "Quantity"
        },
        {
          "type": "number",
          "id": "default_quantity",
          "label": "Default quantity",
          "default": 1
        },
        {
          "type": "number",
          "id": "min_quantity",
          "label": "Minimum quantity",
          "default": 1
        },
        {
          "type": "select",
          "id": "column_layout",
          "label": "Column Layout",
          "options": [
            { "value": "full", "label": "Full Width" },
            { "value": "left", "label": "Left Half (Pair with next 'Right Half')" },
            { "value": "right", "label": "Right Half (Pair with previous 'Left Half')" }
          ],
          "default": "full"
        }
      ]
    },
    {
      "type": "buy_buttons",
      "name": "Buy Buttons",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "add_to_cart_text",
          "label": "Add to cart button text",
          "default": "Add to Cart"
        },
        {
          "type": "checkbox",
          "id": "show_dynamic_checkout",
          "label": "Show dynamic checkout buttons (e.g., Buy it now, PayPal)",
          "default": true
        },
        {
          "type": "select",
          "id": "column_layout",
          "label": "Column Layout",
          "options": [
            { "value": "full", "label": "Full Width" },
            { "value": "left", "label": "Left Half (Pair with next 'Right Half')" },
            { "value": "right", "label": "Right Half (Pair with previous 'Left Half')" }
          ],
          "default": "full"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product",
      "category": "Product",
      "blocks": [
        {
          "type": "social_proof"
        },
        {
          "type": "quantity_selector"
        },
        {
          "type": "buy_buttons"
        }
      ]
    }
  ]
}
{% endschema %}

{%- liquid
  # Determine which product to display
  assign current_product = product
  if section.settings.selected_product != blank
    assign current_product = all_products[section.settings.selected_product]
  endif
-%}

<div class="product-section" data-section-id="{{ section.id }}" data-section-type="product">
  <div class="container mx-auto px-4 py-8">
    <div class="grid grid-cols-1 md:grid-cols-12 gap-8">
      <!-- Product Images -->
      <div class="product-images relative md:col-span-4">
        <div class="product-image-main bg-gray-50 rounded-lg overflow-hidden aspect-square">
          {%- if current_product.featured_image -%}
            <img
              src="{{ current_product.featured_image | img_url: '800x' }}"
              alt="{{ current_product.featured_image.alt | escape }}"
              class="w-full h-full object-cover"
              id="ProductPhotoImg"
              data-zoom-image="{{ current_product.featured_image | img_url: '1500x' }}"
            >
          {%- endif -%}
        </div>
        
        {%- if current_product.images.size > 1 -%}
          <div class="product-image-thumbs grid grid-cols-5 gap-2 mt-4">
            {%- for image in current_product.images -%}
              <button class="thumbnail-item bg-gray-50 rounded-md overflow-hidden border-2 aspect-square {% if forloop.first %}border-blue-500{% else %}border-transparent{% endif %}" data-image-id="{{ image.id }}">
                <img
                  src="{{ image | img_url: '150x' }}"
                  alt="{{ image.alt | escape }}"
                  class="w-full h-full object-cover"
                >
              </button>
            {%- endfor -%}
          </div>
        {%- endif -%}
      </div>

      <!-- Product Info -->
      <div class="product-info md:col-span-8">
        <h1 class="text-3xl font-bold mb-2">{{ current_product.title }}</h1>
        
        <!-- Social Proof -->
        {%- for block in section.blocks -%}
          {%- if block.type == 'social_proof' -%}
            <div class="social-proof flex items-center mb-4">
              <div class="stars text-yellow-400">â˜…â˜…â˜…â˜…â˜…</div>
              <span class="ml-2 text-gray-600">{{ block.settings.average_rating }} ({{ block.settings.review_count }} reviews)</span>
            </div>
          {%- endif -%}
        {%- endfor -%}

        <!-- Price -->
        <div class="price-container mb-6">
          <span class="text-2xl font-bold" data-product-price>
            {{ current_product.selected_or_first_available_variant.price | money }}
          </span>
          {%- if current_product.compare_at_price_max > current_product.price -%}
            <span class="ml-2 text-gray-500 line-through">
              {{ current_product.compare_at_price_max | money }}
            </span>
            <span class="ml-2 text-red-500">
              Save {{ current_product.compare_at_price_max | minus: current_product.price | money }}
            </span>
          {%- endif -%}
        </div>

        {%- form 'product', current_product -%}
          <input type="hidden" name="id" value="{{ current_product.selected_or_first_available_variant.id }}">

          <!-- Variant Selector -->
          {%- if current_product.has_only_default_variant == false and section.settings.show_variant_labels -%}
            <div class="variant-selectors mb-6">
              {%- for option in current_product.options_with_values -%}
                <div class="variant-selector mb-4">
                  <label class="block text-sm font-medium mb-2">{{ option.name }}</label>
                  <div class="grid grid-cols-4 gap-2">
                    {%- for value in option.values -%}
                      <button
                        type="button"
                        class="variant-button px-4 py-2 border-2 rounded-md {% if option.selected_value == value %}border-blue-500 bg-blue-50{% else %}border-gray-200{% endif %}"
                        data-option-position="{{ forloop.index0 }}"
                        data-value="{{ value | escape }}"
                      >
                        {{ value }}
                      </button>
                    {%- endfor -%}
                  </div>
                </div>
              {%- endfor -%}
            </div>
          {%- endif -%}

          <!-- Blocks: Quantity Selector & Buy Buttons -->
          {%- for block in section.blocks -%}
            {%- case block.type -%}
              {%- when 'quantity_selector' -%}
                <div class="quantity-selector mb-6" {{ block.shopify_attributes }}>
                  <label class="block text-sm font-medium mb-2">{{ block.settings.label }}</label>
                  <div class="flex items-center border rounded-md w-32">
                    <button type="button" class="quantity-button minus px-3 py-2 text-gray-600">âˆ’</button>
                    <input 
                      type="number" 
                      name="quantity" 
                      class="quantity-input w-full text-center border-x" 
                      value="{{ block.settings.default_quantity }}" 
                      min="{{ block.settings.min_quantity }}"
                      data-min-quantity="{{ block.settings.min_quantity }}"
                    >
                    <button type="button" class="quantity-button plus px-3 py-2 text-gray-600">+</button>
                  </div>
                </div>
              {%- when 'buy_buttons' -%}
                <div class="buy-buttons-block mb-4" {{ block.shopify_attributes }}>
                  <button
                    type="submit"
                    name="add"
                    class="add-to-cart w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-md mb-2 flex items-center justify-center"
                    {% unless current_product.available %}disabled{% endunless %}
                  >
                    {%- if current_product.available -%}
                      <span class="add-to-cart-text">{{ block.settings.add_to_cart_text }}</span>
                    {%- else -%}
                      <span class="sold-out-text">Sold Out</span>
                    {%- endif -%}
                  </button>
                  {%- if block.settings.show_dynamic_checkout -%}
                    {{ form | payment_button }}
                  {%- endif -%}
                </div>
            {%- endcase -%}
          {%- endfor -%}

          <!-- Trust Badge -->
          <div class="trust-badge text-center text-gray-600 mb-6">
            {{ section.settings.trust_badge_text }}
          </div>

          <!-- Inventory Notice -->
          {%- if section.settings.show_inventory_notice and current_product.available -%}
            {%- assign inventory = current_product.selected_or_first_available_variant.inventory_quantity -%}
            {%- if inventory <= 10 and inventory > 0 -%}
              <div class="inventory-notice text-red-500 text-sm mb-4">
                Only {{ inventory }} left in stock - order soon
              </div>
            {%- endif -%}
          {%- endif -%}

          <!-- Shipping Estimate -->
          {%- if section.settings.show_shipping_estimate -%}
            <div class="shipping-estimate text-sm text-gray-600 mb-4">
              <span class="icon">ðŸšš</span>
              Free shipping â€¢ Estimated delivery: 2-4 business days
            </div>
          {%- endif -%}

          <!-- Product Description -->
          <div class="product-description prose max-w-none mt-8">
            {{ current_product.description }}
          </div>
        {%- endform -%}
      </div>
    </div>
  </div>
</div>

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const productSection = document.querySelector('.product-section');
  
  // Thumbnail click handling
  const thumbnails = document.querySelectorAll('.thumbnail-item');
  thumbnails.forEach(thumb => {
    thumb.addEventListener('click', function() {
      // Update main image
      const mainImage = document.querySelector('#ProductPhotoImg');
      const newSrc = this.querySelector('img').src.replace('compact', 'large');
      mainImage.src = newSrc;
      
      // Update active state
      thumbnails.forEach(t => t.classList.remove('border-blue-500'));
      this.classList.add('border-blue-500');
    });
  });

  // Quantity selector
  const quantityInputs = document.querySelectorAll('.quantity-input');
  quantityInputs.forEach(quantityInput => {
    const minQuantity = parseInt(quantityInput.dataset.minQuantity) || 1;
    const minusButton = quantityInput.parentElement.querySelector('.minus');
    const plusButton = quantityInput.parentElement.querySelector('.plus');

    minusButton.addEventListener('click', () => {
      const currentValue = parseInt(quantityInput.value);
      if (currentValue > minQuantity) {
        quantityInput.value = currentValue - 1;
      }
    });
    
    plusButton.addEventListener('click', () => {
      const currentValue = parseInt(quantityInput.value);
      quantityInput.value = currentValue + 1;
    });

    // Ensure minimum quantity
    quantityInput.addEventListener('change', () => {
      const currentValue = parseInt(quantityInput.value);
      if (currentValue < minQuantity) {
        quantityInput.value = minQuantity;
      }
    });
  });

  // Variant selection
  const variantButtons = document.querySelectorAll('.variant-button');
  const variantIdInput = document.querySelector('input[name="id"]');
  const variants = {{ current_product.variants | json }};
  const options = {{ current_product.options_with_values | json }};
  let currentVariant = {{ current_product.selected_or_first_available_variant | json }};
  
  function updateVariantId(selectedOptions) {
    const matchedVariant = variants.find(variant => {
      return options.every((option, index) => {
        return variant[`option${index + 1}`] === selectedOptions[index];
      });
    });
    
    if (matchedVariant) {
      variantIdInput.value = matchedVariant.id;
      currentVariant = matchedVariant;
      
      // Update price
      const priceElement = document.querySelector('[data-product-price]');
      if (priceElement) {
        priceElement.textContent = Shopify.formatMoney(matchedVariant.price);
      }
      
      // Update availability
      const addToCartButton = document.querySelector('.add-to-cart');
      const addToCartText = addToCartButton.querySelector('span');
      if (matchedVariant.available) {
        addToCartButton.disabled = false;
        addToCartText.textContent = 'Add to Cart';
      } else {
        addToCartButton.disabled = true;
        addToCartText.textContent = 'Sold Out';
      }
    }
  }
  
  variantButtons.forEach(button => {
    button.addEventListener('click', function() {
      const position = parseInt(this.dataset.optionPosition);
      const value = this.dataset.value;
      
      // Update active state
      const siblings = document.querySelectorAll(`[data-option-position="${position}"]`);
      siblings.forEach(sib => sib.classList.remove('border-blue-500', 'bg-blue-50'));
      this.classList.add('border-blue-500', 'bg-blue-50');
      
      // Get all selected options
      const selectedOptions = Array.from(options).map((option, index) => {
        const selectedButton = document.querySelector(`.variant-button[data-option-position="${index}"].border-blue-500`);
        return selectedButton ? selectedButton.dataset.value : option.values[0];
      });
      
      updateVariantId(selectedOptions);
    });
  });
});
{% endjavascript %}

{% stylesheet %}
.product-image-main {
  position: relative;
}

.product-image-main img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.aspect-square {
  aspect-ratio: 1 / 1;
}

.thumbnail-item {
  cursor: pointer;
  transition: border-color 0.2s ease;
}

.thumbnail-item:hover {
  border-color: #93C5FD;
}

.variant-button {
  cursor: pointer;
  transition: all 0.2s ease;
}

.variant-button:hover {
  border-color: #93C5FD;
  background-color: #EFF6FF;
}

.quantity-input {
  -moz-appearance: textfield;
}

.quantity-input::-webkit-outer-spin-button,
.quantity-input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.quantity-button {
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.quantity-button:hover {
  background-color: #F3F4F6;
}

.add-to-cart {
  transition: background-color 0.2s ease;
}

.add-to-cart:disabled {
  background-color: #9CA3AF;
  cursor: not-allowed;
}
{% endstylesheet %} 